{"name":"Marlin","tagline":"Fast and easy ReST API server on redis","body":"![Marlin](https://github.com/atmb4u/marlin/blob/master/marlin/static/marlin.jpg?raw=true)\r\n\r\nMarlin\r\n======\r\n\r\n#### a fast, frill-free REST API with ZERO setup time is too interesting.\r\n\r\nQuick Start Guide\r\n-----------------\r\n\r\n```bash\r\n\r\npip install marlin  # install marlin to the python environment.\r\n\r\nmarlin-server start  # start marlin server - port: 5000\r\n\r\n```\r\n\r\n\r\nDetailed Installation in Ubuntu\r\n-------------------------------\r\n\r\n* redis-server\r\n\r\n```bash\r\nsudo apt-get install redis-server\r\n```\r\n* create virtualenv\r\n\r\n```bash\r\nsudo apt-get install python-pip\r\nsudo pip install virtualenv\r\nvirtualenv marlin-env\r\nsource marlin-env/bin/activate\r\n```\r\n\r\n* requests, ujson, flask, python-daemon\r\n```bash\r\npip install flask requests ujson python-daemon redis\r\n```\r\n\r\n* install marlin\r\n\r\n```bash\r\npip install marlin  # install marlin to the python environment.\r\n\r\n```\r\n\r\n\r\nManaging Server\r\n---------------\r\n\r\n```bash\r\nmarlin-server start  # starts server with default conf on port 5000\r\n\r\nmarlin-server stop  # stops the server\r\n\r\nmarlin-server restart  # restart the server\r\n\r\nmarlin-server live  # starts a server on DEBUG mode\r\n```\r\n\r\nRequest Methods\r\n---------------\r\n\r\n\r\n| METHOD        | URL                               | RESPONSE    |              DESCRIPTION                |\r\n| ------------- |:--------------------------------: | :----------:| :--------------------------------------:|\r\n| GET           | /api/v1/[model]?start=1&end=10    |[data] 1-10  | returns the 1-10 elements in the [model]|\r\n| GET           | /api/v1/[model]/1                 |  data item  |  returns the element with id 1          |\r\n| GET           | /ping/                            |  200/500    |   check if service is up and connected  |\r\n| POST          | /api/v1/[model]/                  |    [data]   |        adds data to the model           |\r\n| PUT           | /api/v1/[model]/1/                |    [data]   |             edit data                   |\r\n| DELETE        | /api/v1/[model]/1                 |    200      |         delete the data item            |\r\n| DELETE        | /api/v1/[model]/                  |     -       |         delete complete data in model   |\r\n| DELETE        | /api/v1/[model]?force=1           |     -       | delete and reset model (starts with id=1|\r\n\r\n\r\nServer Configuration\r\n--------------------\r\n\r\n__marlin.config__\r\n\r\nFor custom configuration, just create a __marlin.config__ on the directory from where you are starting marlin-server.\r\n\r\n```\r\n\r\n[SERVER]\r\nDEBUG = True\r\nPID_FILE = /tmp/marlin.pid\r\nLOG_FILE = /tmp/marlin.log\r\nSERVER_PORT = 5000\r\n\r\n[REDIS]\r\nREDIS_SERVER = localhost\r\nREDIS_PORT = 6379\r\nAPI_PREFIX = /api/\r\n\r\n[APP]\r\nAPP_NAME = marlin\r\n```\r\n\r\nCustom urls and functions\r\n----------------\r\n\r\nAlways, a basic REST API is just a scaffolding for the application, and custom defined urls and functions make it beautiful. As marlin is more focused on performance, it is designed for flexibility as well.\r\n\r\nIt is pretty simple to create custom functions in Marlin.\r\n\r\nJust place ```marlin_function.py``` in the present working directory (pwd), with custom routes and custom responses.\r\n\r\n\r\n```python\r\n# marlin_functions.py\r\nfrom marlin import app\r\n\r\n\r\n@app.route(\"/example/\"):\r\n    return Response(\"Simple Custom Response\")\r\n```\r\n\r\nor a more complex example.\r\n\r\n### To get a custom element based on a user id\r\n\r\n```python\r\nimport json\r\nfrom marlin import app, RedisDatabaseManager\r\nfrom flask import Response, request\r\n\r\n\r\n@app.route(\"/simple_get/<model>\")\r\ndef custom_get(model):\r\n    rdm = RedisDatabaseManager(request, model, version='v1')\r\n    user_id = 127\r\n    if rdm:\r\n        rdm.manipulate_data()\r\n        rdm.get_from_redis(user_id)  # get data for the specific user id\r\n    else:\r\n        return json.dumps({\"status\": \"Something is not right\"})\r\n    if rdm.status and rdm.data:\r\n        return Response(rdm.string_data, content_type='application/json; charset=utf-8')\r\n    elif rdm.status:\r\n        return Response(json.dumps({'status': \"No data Found\"}), content_type='application/json; charset=utf-8',\r\n                        status=404)\r\n    else:\r\n        return json.dumps({\"status\": \"Something is not right\"})\r\n```\r\n\r\n\r\nA little more complicated Example\r\n### Following example filter all the objects with ```name=Apple```\r\n\r\n```python\r\n@app.route('/<model>/', methods=['GET'])\r\ndef little_complicated(model):\r\n    custom_range_start = 10\r\n    custom_range_end = 70\r\n    error_response = Response(json.dumps(\r\n        {'status': \"Some unknown error\"}),\r\n        content_type='application/json; charset=utf-8', status=500)\r\n    rdm = RedisDatabaseManager(request, model=model)\r\n    if rdm:\r\n        rdm.manipulate_data()\r\n        rdm.get_many_from_redis(custom_range_start, custom_range_end)\r\n    else:\r\n        return error_response\r\n    if rdm.status:\r\n        if rdm.data:\r\n            custom_query_set = []\r\n            for datum in rdm.data:\r\n                if datum.get(\"name\") == \"Apple\":\r\n                    custom_query_set.append(datum)\r\n            return Response(json.dumps(custom_query_set), content_type='application/json; charset=utf-8')\r\n        else:\r\n            return Response(json.dumps({'status': \"No data Found\"}), content_type='application/json; charset=utf-8',\r\n                            status=404)\r\n    else:\r\n        return error_response\r\n```\r\n","google":"UA-50163949-1","note":"Don't delete this file! It's used internally to help with page regeneration."}